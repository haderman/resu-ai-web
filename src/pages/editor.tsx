import type { NextPage } from 'next';
import Head from 'next/head';
import { unstable_getServerSession } from 'next-auth';
import { getProviders } from 'next-auth/react';

import { Editor } from '@/components/editor';
import { wrapper } from '@/state/store';
import { sessionSlice } from '@/state/session';
import { authProvidersSlice } from '@/state/auth-providers';
import { apiState } from '@/state/api';
import { ThemeContainer } from '@/components/common';

import { authOptions } from './api/auth/[...nextauth]';

export const getServerSideProps = wrapper.getServerSideProps(store => async ({ req, res }) => {
  const session = await unstable_getServerSession(req, res, authOptions);
  store.dispatch(sessionSlice.actions.setSession(session));

  try {
    const providers = await getProviders();
    store.dispatch(authProvidersSlice.actions.setAuthProviders(providers?.github));
  } catch (error) {
    console.error(error);
  }

  // I have to return an object with props otherwise I get a typescript error (I need to understand why)
  return {
    props: {}
  };
});

const EditorPage: NextPage = () => {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <LoadResume />
      <ThemeContainer>
        <Editor />
      </ThemeContainer>
    </>
  );
};

function LoadResume() {
  apiState.resume.useGetResumeQuery();

  return null;
}

export default EditorPage;
